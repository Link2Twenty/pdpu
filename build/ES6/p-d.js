import{P}from"./p.js";import{define}from"./node_modules/xtal-latx/define.js";const m="m",p_d_if="p-d-if",PDIf="PDIf",_addedSMO="_addedSMO";export class PD extends P{static get is(){return"p-d"}get m(){return this._m}set m(val){this.attr(m,val.toString())}static get observedAttributes(){return super.observedAttributes.concat([m])}pass(e){this.passDown(this.nextElementSibling,e,0)}passDown(start,e,count){let nextSib=start;while(nextSib){if("SCRIPT"!==nextSib.tagName){this._cssPropMap.forEach(map=>{if("*"===map.cssSelector||nextSib.matches&&nextSib.matches(map.cssSelector)){count++;this.setVal(e,nextSib,map)}const fec=nextSib.firstElementChild;if(this.id&&fec&&nextSib.hasAttribute(p_d_if)){if(this.matches(nextSib.getAttribute(p_d_if))){this.passDown(fec,e,count);let addedSMOTracker=nextSib[_addedSMO];if(!addedSMOTracker)addedSMOTracker=nextSib[_addedSMO]={};if(!addedSMOTracker[this.id]){if(null!==nextSib)this.addMutObs(nextSib,!0);nextSib[_addedSMO][this.id]=!0}}}})}if(this._hasMax&&count>=this._m)break;nextSib=nextSib.nextElementSibling}}attributeChangedCallback(name,oldVal,newVal){switch(name){case m:if(null!==newVal){this._m=parseInt(newVal);this._hasMax=!0}else{this._hasMax=!1}}super.attributeChangedCallback(name,oldVal,newVal);this.onPropsChange()}connectedCallback(){super.connectedCallback();this._upgradeProperties([m]);this._connected=!0;this.onPropsChange()}addMutObs(baseElement,isParent){let elementToObserve=isParent?baseElement:baseElement.parentElement;if(!elementToObserve)return;this._sibObs=new MutationObserver(()=>{if(!this._lastEvent)return;this._hndEv(this._lastEvent)});this._sibObs.observe(elementToObserve,{childList:!0})}}define(PD);